df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
x = as.matrix(df2[1:2000,])
x1 = as.matrix(df2[2001:3000,])
y = as.matrix(df$Y, ncol=1)
th = matrix(0,784)
for (i in 1:10) {
j[i] = J(x,y,th,m) # stores each iteration Cost
th = th - solve(H(x,y,th,m)) %*% grad(x,y,th,m)
}
dim(x)
t(x)
dim(th)
t(th) %*% t(x)
lamb <- 10
g = function (z) {
return (1 / (1 + exp(-z) ))
} # plot(g(c(1,2,3,4,5,6)))
h = function (x,th) {
return( g(x %*% th) )
} # h(x,th)
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
grad = function (x,y,th,m) {
return( 1/m * t(x) %*% (h(x,th) - y) + 2*lamb*th)
}
H = function (x,y,th,m) {
return (t(x) %*% x * diag(h(x,th)) * diag(1 - h(x,th)) + 2*lamb*diag(ncol(x)))
}
j = array(0,c(10,1))
m = length(df$X_1)
df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
x = as.matrix(df2[1:2000,])
x1 = as.matrix(df2[2001:3000,])
y = as.matrix(df$Y, ncol=1)
th = matrix(0,784)
for (i in 1:10) {
j[i] = J(x,y,th,m) # stores each iteration Cost
th = th - solve(H(x,y,th,m)) %*% grad(x,y,th,m)
}
J(x,y,th,m)
h = function (x,th) {
return( g(x %*% th) )
}  h(x,th)
h(x,th)
log(h(x,th)
)
y
-y * log(h(x,th))
x = as.matrix(df2)
for (i in 1:10) {
j[i] = J(x,y,th,m) # stores each iteration Cost
th = th - solve(H(x,y,th,m)) %*% grad(x,y,th,m)
}
x2 <- x[1:2000,]
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
dim(y)
df$Y[1:2000]
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
y = as.matrix(df$Y[1:2000], ncol=1)
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
y2 = as.matrix(df$Y[2001:3000], ncol=1)
g = function (th) {
return (1 / (1 + exp(t(th) %*% t(x1))))
}
pred <- g(th)
pred.prob <- as.data.frame(pred)
response <- ifelse(pred > .5, 0, 1)
response2 <- t(response)
dim(pred)
df$Y <- ifelse(df$Y==-1, 0, 1)
pred2 <- cbind(df$Y[2001:3000], response2, t(pred.prob),x1)
length(which(pred2[,1]!=pred2[,2]))/3000
wrongs <- pred2[which(pred2[,1]!=pred2[,2]),]
wrongs2 <- as.tibble(wrongs)
wrongs2 <- wrongs2 %>%
arrange(desc(V3))
wrongs2[1:20,]
wrongs2 <- rename(wrongs2, Y = V1, Pred= V2, Pred.probs = V3)
View(wrongs2)
dim(wrongs2)
m <-print(structure(wrongs2[nrow(wrongs2):1,]))
length(which(pred2[,1]!=pred2[,2]))/1000
View(m)
viewletters <- function(x,...){
z = matrix(match(x, c("black", "white")), nrow(x), ncol(x))
image(t(z), col = c("black","white"), ...)
}
viewletters(m)
m[1,]
z = matrix(match(m, c("black", "white")), nrow(m), ncol(m))
z
z = matrix(match(m[-1:-3,], c("black", "white")), nrow(m), ncol(m))
z
unique(wrongs2[,2])
min(wrongs2[,3])
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(df2)
]
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(df2)
plotGrid(df2[1,])
plotGrid(df2[,1])
plotGrid(df2[1,1])
plotGrid(df[1,])
plotGrid(df[1,1])
plotGrid(df[,1])
plotGrid(df2)
plotGrid(df)
plotGrid(wrongs2[,-c(1:3)])
mats <- list()
head(df)
for (i in 1:length(df[1, ])){
mats[[i]] <- matrix(as.numeric(df[i, -1]), nrow = 28, byrow = TRUE)
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(wrongs2[,-c(1:3)])
]
mats <- list()
for (i in 1:length(df[1, ])){
mats[[i]] <- matrix(as.numeric(df[i, -1]), nrow = 28, byrow = TRUE)
}
str(mats)
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(mats[1])
plotGrid(mats)
str(mats)
plotGrid(mats[[1]])
mats <- list()
for (i in 1:length(wrongs2[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs2[i, -3]), nrow = 28, byrow = TRUE)
}
mats <- list()
length(wrongs2[1, ]
)
i=1
matrix(as.numeric(wrongs2[i, -3]), nrow = 28, byrow = TRUE)
mats <- list()
for (i in 1:length(wrongs2[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs2[i, -c(1:-3)]), nrow = 28, byrow = TRUE)
}
mats <- list()
for (i in 1:length(wrongs2[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs2[i, c(-1:-3)]), nrow = 28, byrow = TRUE)
}
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(mats[[1]])
plotGrid(mats[[1:20]])
plotGrid(mats[[1]])
str(mats)
dim(mats)
length(mats)
length(wrongs2)
wrongs3 <- wrongs2[1:20,]
mats <- list()
for (i in 1:length(wrongs3[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs3[i, c(-1:-3)]), nrow = 28, byrow = TRUE)
}
plotGrid <- function(grid){
revgrid <- unlist(apply(grid, 2, rev))
image <- image(as.matrix(t(revgrid)), col = gray((255:0)/255))
image
}
plotGrid(mats)
plotGrid(mats[[1]])
plotGrid(mats[[2]])
plotGrid(mats[[3]])
plotGrid(mats[[4]])
length(mats)
mats <- list()
dim(wrongs3)
length(mats[[1]])
dim(mats[[1]])
mats[[1]]
mats <- list()
for (i in 1:length(wrongs3[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs3[i, c(-1:-3)]), nrow = 28, byrow = TRUE)
}
mats
mats <- list()
for (i in 1:length(wrongs3[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs3[i, c(-1:-3)]), nrow = 28, byrow = TRUE)
}
str(mats)
plotGrid(mats[[5]])
plotGrid(mats[[20]])
par(mfrow=c(10,10))
plotGrid(mats[[20]])
plotGrid(mats[[21]])
plotGrid(mats[[19]])
plotGrid(mats[[18]])
lamb <- 10
g = function (z) {
return (1 / (1 + exp(-z) ))
} # plot(g(c(1,2,3,4,5,6)))
h = function (x,th) {
return( g(x %*% th) )
}
h(x,th)
h(x,th)
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
J(x,y,th,m)
lamb <- 10
g = function (z) {
return (1 / (1 + exp(-z) ))
} # plot(g(c(1,2,3,4,5,6)))
h = function (x,th) {
return( g(x %*% th) )
}
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
grad = function (x,y,th,m) {
return( 1/m * t(x) %*% (h(x,th) - y) + 2*lamb*th)
}
H = function (x,y,th,m) {
return (t(x) %*% x * diag(h(x,th)) * diag(1 - h(x,th)) + 2*lamb*diag(ncol(x)))
}
j = array(0,c(10,1))
m = length(df$X_1)
df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
library(dplyr)
df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
x = as.matrix(df2)
x2 <- x[1:2000,]
x1 = as.matrix(df2[2001:3000,])
y = as.matrix(df$Y[1:2000], ncol=1)
y2 = as.matrix(df$Y[2001:3000], ncol=1)
th = matrix(0,784)
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
th
g = function (th) {
return (1 / (1 + exp(t(th) %*% t(x1))))
}
pred <- g(th)
pred.prob <- as.data.frame(pred)
response <- ifelse(pred > .5, 0, 1)
response2 <- t(response)
df$Y <- ifelse(df$Y==-1, 0, 1)
pred2 <- cbind(df$Y[2001:3000], response2, t(pred.prob),x1)
length(which(pred2[,1]!=pred2[,2]))/1000
library(dplyr)
library("R.matlab")
df <- R.matlab::readMat("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Chris USU/Stat Learning and Data Mining II stat 6910/mnist_49_3000.mat") %>% lapply(t) %>% lapply(as_tibble)
df <- R.matlab::readMat("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Chris USU/Stat Learning and Data Mining II stat 6910/mnist_49_3000.mat") %>% lapply(t) %>% lapply(as_tibble)
colnames(df[[1]]) <- sprintf("X_%s",seq(1:ncol(df[[1]])))
colnames(df[[2]]) <- c("Y")
df <- bind_cols(df) %>% select(Y, everything())
lamb <- 10
g = function (z) {
return (1 / (1 + exp(-z) ))
} # plot(g(c(1,2,3,4,5,6)))
h = function (x,th) {
return( g(x %*% th) )
}
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
grad = function (x,y,th,m) {
return( 1/m * t(x) %*% (h(x,th) - y) + 2*lamb*th)
}
H = function (x,y,th,m) {
return (t(x) %*% x * diag(h(x,th)) * diag(1 - h(x,th)) + 2*lamb*diag(ncol(x)))
}
j = array(0,c(10,1))
m = length(df$X_1)
df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
x = as.matrix(df2)
x2 <- x[1:2000,]
x1 = as.matrix(df2[2001:3000,])
y = as.matrix(df$Y[1:2000], ncol=1)
y2 = as.matrix(df$Y[2001:3000], ncol=1)
th = matrix(0,784)
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
th
g = function (th) {
return (1 / (1 + exp(t(th) %*% t(x1))))
}
pred <- g(th)
pred.prob <- as.data.frame(pred)
response <- ifelse(pred > .5, 0, 1)
response2 <- t(response)
df$Y <- ifelse(df$Y==-1, 0, 1)
pred2 <- cbind(df$Y[2001:3000], response2, t(pred.prob),x1)
length(which(pred2[,1]!=pred2[,2]))/1000
lamb <- 10
g = function (z) {
return (1 / (1 + exp(-z) ))
} # plot(g(c(1,2,3,4,5,6)))
h = function (x,th) {
return( g(x %*% th) )
}
J = function (x,y,th,m) {
return( 1/m * sum(-y * log(h(x,th)) - (1 - y) * log(1 - h(x,th))) + lamb*(t(th)%*%th))
}
grad = function (x,y,th,m) {
return( 1/m * t(x) %*% (h(x,th) - y) + 2*lamb*th)
}
H = function (x,y,th,m) {
return (t(x) %*% x * diag(h(x,th)) * diag(1 - h(x,th)) + 2*lamb*diag(ncol(x)))
}
j = array(0,c(10,1))
m = length(df$X_1)
df2 <- select(df, -Y)
p <- data.frame(rep(1,m))
x = as.matrix(df2)
x2 <- x[1:2000,]
x1 = as.matrix(df2[2001:3000,])
y = as.matrix(df$Y[1:2000], ncol=1)
y2 = as.matrix(df$Y[2001:3000], ncol=1)
th = matrix(0,784)
for (i in 1:10) {
j[i] = J(x=x2,y,th,m) # stores each iteration Cost
th = th - solve(H(x=x2,y,th,m)) %*% grad(x=x2,y,th,m)
}
th
g = function (th) {
return (1 / (1 + exp(t(th) %*% t(x1))))
}
gg = function (th) {
return (1 / (1 + exp(t(th) %*% t(x1))))
}
pred <- gg(th)
pred.prob <- as.data.frame(pred)
response <- ifelse(pred > .5, 0, 1)
response2 <- t(response)
df$Y <- ifelse(df$Y==-1, 0, 1)
pred2 <- cbind(y2, response2, t(pred.prob),x1)
length(which(pred2[,1]!=pred2[,2]))/1000
wrongs <- pred2[which(pred2[,1]!=pred2[,2]),]
wrongs2 <- as.tibble(wrongs)
library(tibble)
wrongs2 <- as.tibble(wrongs)
wrongs2 <- wrongs2 %>%
arrange(desc(V3))
wrongs2[1:20,]
wrongs2 <- rename(wrongs2, Y = V1, Pred= V2, Pred.probs = V3)
wrongs3 <- wrongs2[1:20,]
View(wrongs2)
abs(wrongs2$Pred.probs-.5)
wrongs2$Pred.probs-.5
wrongs4 <- wrongs2 %>%
mutate(tot_diff = abs(wrongs2$Pred.probs-.5))
View(wrongs4)
select(wrongs4, Pred.robs, tot_diff)
select(wrongs4, Pred.probs, tot_diff)
View(select(wrongs4, Pred.probs, tot_diff))
pred2 <- cbind(y2, response2, t(pred.prob))#,x1)
length(which(pred2[,1]!=pred2[,2]))/1000
wrongs <- pred2[which(pred2[,1]!=pred2[,2]),]
wrongs2 <- as.tibble(wrongs)
wrongs2 <- wrongs2 %>%
arrange(desc(V3))
wrongs2 <- rename(wrongs2, Y = V1, Pred= V2, Pred.probs = V3)
wrongs4 <- wrongs2 %>%
mutate(tot_diff = abs(wrongs2$Pred.probs-.5)) %>%
arrange(desc(tot_diff))
View(wrongs4)
wrongs5 <- bind_cols(wrongs4, x1)
wrongs5 <- cbind(wrongs4, x1)
dim(wrongs4)
pred2 <- cbind(y2, response2, t(pred.prob)),x1)
pred2 <- cbind(y2, response2, t(pred.prob),x1))
pred2 <- cbind(y2, response2, t(pred.prob),x1)
length(which(pred2[,1]!=pred2[,2]))/1000
wrongs <- pred2[which(pred2[,1]!=pred2[,2]),]
wrongs2 <- as.tibble(wrongs)
wrongs2 <- wrongs2 %>%
arrange(desc(V3))
wrongs2 <- rename(wrongs2, Y = V1, Pred= V2, Pred.probs = V3)
wrongs4 <- wrongs2 %>%
mutate(tot_diff = abs(wrongs2$Pred.probs-.5)) %>%
arrange(desc(tot_diff))
wrongs5 <- wrongs4 %>% select(Y, Pred, Pred.probs, tot_diff, X1:X784)
wrongs5 <- wrongs4 %>% select(Y, Pred, Pred.probs, tot_diff, X_1:X_784)
View(wrongs5)
wrongs6 <- wrongs5[1:20,]
length(which(pred2[,1]!=pred2[,2]))/1000
library(graphics)
mats <- list()
for (i in 1:length(wrongs6[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs6[i, c(-1:-4)]), nrow = 28, byrow = TRUE)
}
str(mats)
rm(mats)
mats <- list()
for (i in 1:length(wrongs6[1, ])){
mats[[i]] <- matrix(as.numeric(wrongs6[i, c(-1:-4)]), nrow = 28, byrow = TRUE)
}
str(mats)
plotGrid(mats[[1]])
plotGrid(mats[[2]])
plotGrid(mats[[3]])
plotGrid(mats[[4]])
plotGrid(mats[[5]])
plotGrid(mats[[6]])
plotGrid(mats[[1]]:mats[[20]])
plotGrid(mats[[1]])
par(mfrow=c(10,10))
plotGrid(mats[[1]])
plotGrid(mats[[1]])
plotGrid(mats[[1]])
par(mfrow=c(10,10))
plotGrid(mats[[1]])
plotGrid(mats[[2]])
par(mar=c(1,1,1,1))
plotGrid(mats[[1]])
plotGrid(mats[[2]])
plotGrid(mats[[3]])
plotGrid(mats[[4]])
plotGrid(mats[[5]])
plotGrid(mats[[6]])
plotGrid(mats[[7]])
plotGrid(mats[[8]])
plotGrid(mats[[9]])
plotGrid(mats[[10]])
par(mfrow=c(4,5))
par(mar=c(1,1,1,1))
plotGrid(mats[[1]])
plotGrid(mats[[2]])
plotGrid(mats[[3]])
plotGrid(mats[[4]])
plotGrid(mats[[5]])
plotGrid(mats[[6]])
plotGrid(mats[[7]])
plotGrid(mats[[8]])
plotGrid(mats[[9]])
plotGrid(mats[[10]])
plotGrid(mats[[11]])
plotGrid(mats[[12]])
plotGrid(mats[[13]])
plotGrid(mats[[14]])
plotGrid(mats[[15]])
plotGrid(mats[[16]])
plotGrid(mats[[17]])
plotGrid(mats[[18]])
plotGrid(mats[[19]])
plotGrid(mats[[20]])
knitr::include_graphics("/Users/chris/Desktop/Screen Shot 2018-11-08 at 9.20.16 AM.png")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Chris USU/Master's Thesis Work/Final_Report 10:27:18/rfviz")
library(devtool)
library(devtools)
check()
document()
check()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Chris USU/Master's Thesis Work/RfvizGithub/rfviz")
devtools::use_build_ignore("notes")
usethis::use_build_ignore()
usethis::use_build_ignore("cran_comments.md")
usethis::use_build_ignore("cran_comments.Rmd")
document()
check()
usethis::use_build_ignore("cran-comments.Rmd")
usethis::use_build_ignore("cran-comments.md")
document()
check()
check()
check()
library(devtools)
setwd("~/Documents/Chris USU/Master's Thesis Work/RfvizGithub/rfviz")
usethis::use_build_ignore("Rfviz.md")
check()
check()
check()
